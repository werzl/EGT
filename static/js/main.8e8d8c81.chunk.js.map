{"version":3,"sources":["logo.svg","Components/Login/LoginModal.jsx","Components/SiteNav/SiteNav.jsx","Pages/Overview.jsx","Pages/Modules.jsx","Pages/Account.jsx","Pages/About.jsx","Pages/Contact.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","LoginModal","show","closeModal","Modal","onHide","e","Header","closeButton","Title","Body","Footer","Button","variant","onClick","SiteNav","useState","showLoginModal","setShowLoginModal","Navbar","collapseOnSelect","expand","bg","Brand","Toggle","aria-controls","Collapse","id","Nav","className","to","Link","icon","faSignInAlt","Overview","Jumbotron","fluid","Container","Modules","Account","About","Contact","App","Row","Col","exact","path","src","logo","alt","href","target","rel","whyDidYouRender","Boolean","window","location","hostname","match","console","info","process","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e8d8c81.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nimport { Button, Modal } from \"react-bootstrap\";\n\nfunction LoginModal({ show, closeModal }) {\n\n    return (\n        <>\n            <Modal show={show} onHide={e => closeModal()}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Modal heading</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => closeModal()}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => closeModal()}>\n                        Save Changes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\nexport default LoginModal;","import React, { useState } from \"react\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\n//import logo from \"../../essex_logo.gif\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSignInAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nimport LoginModal from \"../Login/LoginModal\";\n\nfunction SiteNav() {\n    const [showLoginModal, setShowLoginModal] = useState(false);\n\n    return (\n        <>\n            <LoginModal show={showLoginModal} closeModal={() => setShowLoginModal(false)} />\n\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand>\n                    EGT\n                </Navbar.Brand>\n\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <LinkContainer to=\"/Overview\">\n                            <Nav.Link>Overview</Nav.Link>\n                        </LinkContainer>\n\n                        <LinkContainer to=\"/Modules\">\n                            <Nav.Link>Modules</Nav.Link>\n                        </LinkContainer>\n\n                        <LinkContainer to=\"/Account\">\n                            <Nav.Link>Account</Nav.Link>\n                        </LinkContainer>\n\n                        <LinkContainer to=\"/About\">\n                            <Nav.Link>About</Nav.Link>\n                        </LinkContainer>\n\n                        <LinkContainer to=\"/Contact\">\n                            <Nav.Link>Contact</Nav.Link>\n                        </LinkContainer>\n\n                        {/* <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\n                            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                            <NavDropdown.Divider />\n                            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                        </NavDropdown> */}\n                    </Nav>\n\n                    <Nav>\n                        <Nav.Link onClick={() => setShowLoginModal(true)}><FontAwesomeIcon icon={faSignInAlt} /> Login</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </>\n    );\n}\n\nexport default SiteNav;","import React from \"react\";\nimport { Jumbotron, Container } from \"react-bootstrap\";\n\nfunction Overview() {\n    return (\n        <Jumbotron fluid>\n            <Container>\n                <h1>Overview</h1>\n                <p>\n                    This is the Overview page, it will display an overview all of the current modules the student is enrolled on, including grades and predictions.\n                </p>\n            </Container>\n        </Jumbotron>\n    );\n}\n\nexport default Overview;","import React from \"react\";\nimport { Jumbotron, Container } from \"react-bootstrap\";\n\nfunction Modules() {\n    return (\n        <Jumbotron fluid>\n            <Container>\n                <h1>Modules</h1>\n                <p>\n                    This is the Modules page, it will display all of the current modules the student is enrolled on, including grades and predictions.\n                </p>\n            </Container>\n        </Jumbotron>\n    );\n}\n\nexport default Modules;","import React from \"react\";\nimport { Jumbotron, Container } from \"react-bootstrap\";\n\nfunction Account() {\n    return (\n        <Jumbotron fluid>\n            <Container>\n                <h1>Account</h1>\n                <p>\n                    This is the Account page, the control center for user accounts.\n                </p>\n            </Container>\n        </Jumbotron>\n    );\n}\n\nexport default Account;","import React from \"react\";\nimport { Jumbotron, Container } from \"react-bootstrap\";\n\nfunction About() {\n    return (\n        <Jumbotron fluid>\n            <Container>\n                <h1>About</h1>\n                <p>\n                    This is the About page, it will display details about the creation and goals of EGT.\n                </p>\n            </Container>\n        </Jumbotron>\n    );\n}\n\nexport default About;","import React from \"react\";\nimport { Jumbotron, Container } from \"react-bootstrap\";\n\nfunction Contact() {\n    return (\n        <Jumbotron fluid>\n            <Container>\n                <h1>Contact</h1>\n                <p>\n                    This is the Contact page, it will display contact details for the administrators of the site.\n                </p>\n            </Container>\n        </Jumbotron>\n    );\n}\n\nexport default Contact;","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport { Row, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport SiteNav from \"./Components/SiteNav/SiteNav\";\nimport Overview from \"./Pages/Overview\";\nimport Modules from \"./Pages/Modules\";\nimport Account from \"./Pages/Account\";\nimport About from \"./Pages/About\";\nimport Contact from \"./Pages/Contact\";\n\nfunction App() {\n    return (\n        <>\n            <Router>\n                <Row>\n                    <Col>\n                        <SiteNav />\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col>\n                        <Switch>\n                            <Route exact path=\"/\">\n                                <header className=\"App-header\">\n                                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                                    <p>\n                                        Edit <code>src/App.js</code> and save to reload.\n                                    </p>\n                                    <a\n                                        className=\"App-link\"\n                                        href=\"https://reactjs.org\"\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\">Learn React</a>\n                                </header>\n                            </Route>\n\n                            <Route path=\"/Overview\">\n                                <Overview />\n                            </Route>\n\n                            <Route path=\"/Modules\">\n                                <Modules />\n                            </Route>\n\n                            <Route path=\"/Account\">\n                                <Account />\n                            </Route>\n\n                            <Route path=\"/About\">\n                                <About />\n                            </Route>\n\n                            <Route path=\"/Contact\">\n                                <Contact />\n                            </Route>\n                        </Switch>\n                    </Col>\n                </Row>\n\n\n            </Router>\n        </>\n    );\n}\nApp.whyDidYouRender = true;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { registerObserver } from \"react-perf-devtool\";\n// TODO: Remove\nconsole.info(`NODE_ENV: ${process.env.NODE_ENV}`);\nif (process.env.NODE_ENV === \"development\") {\n    registerObserver();\n    const whyDidYouRender = require(\"@welldone-software/why-did-you-render\");\n    whyDidYouRender(React, {\n        trackAllPureComponents: true,\n    });\n}\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}